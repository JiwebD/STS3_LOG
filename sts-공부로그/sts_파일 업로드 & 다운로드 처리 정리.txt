STS3(Spring 5.0.7.RELEASE) 파일 업로드 & 다운로드 처리 정리




----------------------------
의존성 추가
----------------------------
maven에
common-io 검색

Apache Commons IO » 2.19.0

pom.xml 에 복붙

<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
<dependency>
    <groupId>commons-io</groupId>
    <artifactId>commons-io</artifactId>
    <version>2.19.0</version>
</dependency>


common-fileupload 검색

Apache Commons FileUpload » 1.5

pom.xml 에 복붙

<!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
<dependency>
    <groupId>commons-fileupload</groupId>
    <artifactId>commons-fileupload</artifactId>
    <version>1.5</version>
</dependency>



maven
update project 하기








----------------------------
WebMvcConfig             servlet-context.xml의 역할을 대체함
----------------------------
/ex09_fileUpDownload/src/main/java/com/example/app/config/WebMvcConfig.java


package com.example.app.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.ComponentScans;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.multipart.MultipartResolver;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;
import org.springframework.web.servlet.ViewResolver;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.view.InternalResourceViewResolver;

@Configuration
@EnableWebMvc  //servlet-context.xml의 역할을 대신해서 함. 스프링 MVC 설정을 자바 기반(@Configuration)으로 활성화하는 어노테이션
@ComponentScans({
	@ComponentScan("com.example.app.controller"),
	@ComponentScan("com.example.app.restController")
})
public class WebMvcConfig implements WebMvcConfigurer{  //servlet-context.xml의 역할을 대신해서 함.

	@Bean
	public MultipartResolver multipartResolver() {
        CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver();
        multipartResolver.setMaxUploadSize(20971520); 			// 20MB	//전체 업로드 허용 사이즈
        multipartResolver.setMaxUploadSizePerFile(20971520); 	// 20MB	//파일 1개당 허용가능한 업로드 사이즈
        multipartResolver.setMaxInMemorySize(20971520); 		// 20MB //캐시 공간
        return multipartResolver;
	}
	
	//ViewResolver
	@Bean
	public ViewResolver viewResolver() {
		InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();
		viewResolver.setPrefix("/WEB-INF/views/");
		viewResolver.setSuffix(".jsp");
		return viewResolver;
	}
	
	
	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {
		//정적파일설정할때 페이지에서 나오는 기본아이콘 (파비콘) 설정할때 중요
		registry.addResourceHandler("/resources/**").addResourceLocations("/resources/");
		
	}

	
	
}



----------------------------
servlet-context.xml  주석
----------------------------
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
<!-- 	<annotation-driven /> -->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
<!-- 	<resources mapping="/resources/**" location="/resources/" /> -->
	

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
<!-- <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	 -->

	<!--  -->
<!-- <context:component-scan base-package="com.example.app.controller" />  -->
	<!--  -->
<!-- <context:component-scan base-package="com.example.app.restController" />  -->
	
	<!-- 
		FrontController 역할을 하는 DispatherServlet설정 파일
		정적 자원의 경로(css,js...) 지정
		MVC Component(@Controller, @Service, @Repository ...) 애노테이션 활성화
		View Resolver(Page와 연결을 담당하는 Bean)등 설정
	 -->
	
	
	
</beans:beans>




실행
접속 잘 되는지 확인


--------------------------------
FileUpDownloadController 생성
--------------------------------

/ex09_fileUpDownload/src/main/java/com/example/app/controller/FileUpDownloadController.java


package com.example.app.controller;

import java.io.File;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.example.app.domain.dto.FileDto;

import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
@RequestMapping("file")
public class FileUpDownloadController {
	
	private String ROOT_PATH = "c:\\";  //루트 경로
	private String UPLOAD_PATH = "upload"; //업로드 경로
	
	@GetMapping("/upload")
	public void upload_form() {
		log.info("GET /file/upload..");
	}
	
	@PostMapping("/upload")
	public void upload(@RequestParam("files") MultipartFile[] files) throws IllegalStateException, IOException {
		log.info("POST /file/upload.." + files.length);
		
		LocalDateTime now = LocalDateTime.now();
		// yyyyMMdd_HHmmss 폴더명
		String folderName = now.format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));

		// 업로드 경로 설정
		String UploadPath = ROOT_PATH 
							+ File.separator // \\구분자
							+ UPLOAD_PATH 
							+ File.separator 
							+ folderName 
							+ File.separator;

		// 디렉토리 생성( c:\\upload\\202504211_102933\\)
		File dir = new File(UploadPath);
		if (!dir.exists())
			dir.mkdirs();
		
		for(MultipartFile file : files) {
			System.out.println("--------------------");
			System.out.println("FILE NAME : " + file.getOriginalFilename());
			System.out.println("FILE SIZE : " + file.getSize() + " Byte");
			System.out.println("--------------------");
			
			String filename = file.getOriginalFilename();
			File fileObject = new File(dir,filename);
			
			file.transferTo(fileObject);	//UPLOAD 처리
		}
	}
	
	@PostMapping("/upload_dto")
	public String upload_dto(FileDto dto) throws IllegalStateException, IOException {
		MultipartFile [] files = dto.getFiles();
		log.info("POST /file/upload.." + files.length);
		
		LocalDateTime now = LocalDateTime.now();
		// yyyyMMdd_HHmmss 폴더명
		String folderName = now.format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));

		// 업로드 경로 설정
		String UploadPath = ROOT_PATH 
							+ File.separator // \\구분자
							+ UPLOAD_PATH 
							+ File.separator 
							+ folderName 
							+ File.separator;

		// 디렉토리 생성( c:\\upload\\202504211_102933\\)
		File dir = new File(UploadPath);
		if (!dir.exists())
			dir.mkdirs();
		
		for(MultipartFile file : files) {
			System.out.println("--------------------");
			System.out.println("FILE NAME : " + file.getOriginalFilename());
			System.out.println("FILE SIZE : " + file.getSize() + " Byte");
			System.out.println("--------------------");
			
			String filename = file.getOriginalFilename();
			File fileObject = new File(dir,filename);
			
			file.transferTo(fileObject);	//UPLOAD 처리
		}
		return "/file/upload";
	}

}


--------------------------------
upload.jsp 생성
--------------------------------

/ex09_fileUpDownload/src/main/webapp/WEB-INF/views/file/upload.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<h1>/file/upload</h1>
	<form 
		action="${pageContext.request.contextPath }/file/upload"
		method="post" 
		enctype="multipart/form-data"
		>
		<input type="file" name="files" multiple />
		<button> 전송 </button>
	</form>
	
	<h1>/file/upload_dto</h1>
	<form 
		action="${pageContext.request.contextPath }/file/upload_dto"
		method="post" 
		enctype="multipart/form-data"
		>
		<input type="file" name="files" multiple />
		<button> 전송 </button>
	</form>

</body>
</html>




실행해서 파일 업로드 잘 되는지 확인
