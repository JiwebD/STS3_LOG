sts-springSecurity 공부 시작


참고 사이트

MVC LAYER
https://gnuoyus.tistory.com/70

SECURITY 기본
https://devhan.tistory.com/310

REMEMBER_ME
https://tech-monster.tistory.com/209



Spring Security 모듈 정리
정의
 Spring Security는 인증(Authentication)과 권한(Authorization)을 처리하는 강력하고 확장 가능한 보안 프레임워크이다.
 웹 애플리케이션과 API의 접근 제어, 세션 관리, CSRF, CORS, 패스워드 암호화 등을 지원한다.

특징
 인증/인가를 필터 체인 기반으로 처리
 세션 및 JWT 기반 인증 방식 지원
 다양한 로그인 방식 지원 (폼 로그인, 소셜 로그인, HTTP Basic 등)
 메서드 수준 보안 제공 (@Secured, @PreAuthorize 등)
 유연한 커스터마이징 가능 (필터, 핸들러, 토큰 처리 등)

활용 예
 로그인 인증 처리
 URL별 접근 권한 제어
 사용자 역할 기반 서비스 기능 제한
 REST API에 JWT 인증 적용
 관리자/일반 사용자 권한 분리








SECURITY 기본설정

SECURITY DB 연결

SECURITY 추가핸들러

SECURITY REMEMBER_ME





------------------------
의존성 
------------------------

maven repository 에서 spring-security 검색

Spring Security Core » 6.4.5

복 붙  pom.xml
<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-core -->
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-core</artifactId>
    <version>6.4.5</version>
</dependency>

버전 맞추기
		<!-- SECURITY -->
		<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-core -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-core</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>

maven repository 에서 spring-security-web 검색

Spring Security Web » 6.4.5

복 붙  pom.xml
<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-web -->
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-web</artifactId>
    <version>6.4.5</version>
</dependency>

버전 맞추기

		<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-web -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>



maven repository 에서 spring-security-config 검색

Spring Security Config » 6.4.5

복 붙  pom.xml

<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-config -->
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-config</artifactId>
    <version>6.4.5</version>
</dependency>

버전 맞추기

		<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-config -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>


maven repository 에서 spring-security-taglibs 검색

Spring Security Taglibs » 6.4.5

복 붙  pom.xml

<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-taglibs -->
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-taglibs</artifactId>
    <version>6.4.5</version>
</dependency>

버전 맞추기

		<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-taglibs -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>




-----------------------------
SecurityConfig.java
-----------------------------
/ex14_springSecurity/src/main/java/com/example/app/config/SecurityConfig.java


package com.example.app.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	@Override
	protected void configure(HttpSecurity http) throws Exception {

		//권한체크
		
		//로그인
		
		//로그아웃
		
		//예외처리
	}

	
	
}




----------------------------
SECURITY FILTER 추가  web.xml
----------------------------
/ex14_springSecurity/src/main/webapp/WEB-INF/web.xml

<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- The definition of the Root Spring Container shared by all Servlets 
		and Filters -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>

	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml
			</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!-- 한글 변환 필터 시작 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter
		</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	
	<!-- SECURITY FILTER  -->
	<filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping> 		
	

</web-app>



-------

SecurityConfig.java
코드 주석하고

실행 해보기

404 에러 확인




--------------------------
SecurityConfig.java
--------------------------
package com.example.app.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	@Override
	protected void configure(HttpSecurity http) throws Exception {

		
		//권한체크
		http.authorizeRequests()
		.anyRequest().authenticated();
		
		//로그인
		
		//로그아웃
		
		//예외처리
	}

	
	
}



실행 
403 에러 확인  어느경로를 가든 403에러 뜸.



--------------------------
SecurityConfig.java
--------------------------
package com.example.app.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	@Override
	protected void configure(HttpSecurity http) throws Exception {

		
		//권한체크
		http.authorizeRequests()
		.anyRequest().authenticated();
		
		//로그인
		http.formLogin()
			.permitAll();
		//로그아웃
		
		//예외처리
	}

	
	
}


실행시

http://localhost:8090/app/login 로 접속됨.



--------------------------
SecurityConfig.java
--------------------------

package com.example.app.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	@Override
	protected void configure(HttpSecurity http) throws Exception {

		
		//권한체크
		http.authorizeRequests()
		.anyRequest().authenticated();
		
		//로그인
		http.formLogin()
			.permitAll();
		//로그아웃
		
		//예외처리
	}

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.inMemoryAuthentication()
			.withUser("user")
			.password("{noop}1234")
			.roles("USER");
	}

	
	
}


실행하면 
http://localhost:8090/app/login 으로 접속됨.

User: user 입력
Password: 1234 입력
Login 버튼 클릭

http://localhost:8090/app/ 접속됨
